// tslint:disable
/**
 * Conduit API
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs'
import {
  BaseAPI,
  HttpHeaders,
  HttpQuery,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from '../runtime'
import {
  GenericErrorModel,
  MultipleArticlesResponse,
  NewArticleRequest,
  SingleArticleResponse,
  UpdateArticleRequestData,
} from '../models'

export interface CreateArticleRequest {
  article: NewArticleRequest
}

export interface DeleteArticleRequest {
  slug: string
}

export interface GetArticleRequest {
  slug: string
}

export interface GetArticlesRequest {
  tag?: string
  author?: string
  favorited?: string
  limit?: number
  offset?: number
}

export interface GetArticlesFeedRequest {
  limit?: number
  offset?: number
}

export interface UpdateArticleRequest {
  slug: string
  article: UpdateArticleRequestData
}

/**
 * no description
 */
export class ArticlesApi extends BaseAPI {
  /**
   * Create an article. Auth is required
   * Create an article
   */
  createArticle({
    article,
  }: CreateArticleRequest): Observable<SingleArticleResponse>
  createArticle(
    { article }: CreateArticleRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<SingleArticleResponse>>
  createArticle(
    { article }: CreateArticleRequest,
    opts?: OperationOpts
  ): Observable<
    SingleArticleResponse | RawAjaxResponse<SingleArticleResponse>
  > {
    throwIfNullOrUndefined(article, 'article', 'createArticle')

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    return this.request<SingleArticleResponse>(
      {
        url: '/articles',
        method: 'POST',
        headers,
        body: article,
      },
      opts?.responseOpts
    )
  }

  /**
   * Delete an article. Auth is required
   * Delete an article
   */
  deleteArticle({ slug }: DeleteArticleRequest): Observable<void>
  deleteArticle(
    { slug }: DeleteArticleRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>
  deleteArticle(
    { slug }: DeleteArticleRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(slug, 'slug', 'deleteArticle')

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    return this.request<void>(
      {
        url: '/articles/{slug}'.replace('{slug}', encodeURI(slug)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    )
  }

  /**
   * Get an article. Auth not required
   * Get an article
   */
  getArticle({ slug }: GetArticleRequest): Observable<SingleArticleResponse>
  getArticle(
    { slug }: GetArticleRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<SingleArticleResponse>>
  getArticle(
    { slug }: GetArticleRequest,
    opts?: OperationOpts
  ): Observable<
    SingleArticleResponse | RawAjaxResponse<SingleArticleResponse>
  > {
    throwIfNullOrUndefined(slug, 'slug', 'getArticle')

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    return this.request<SingleArticleResponse>(
      {
        url: '/articles/{slug}'.replace('{slug}', encodeURI(slug)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    )
  }

  /**
   * Get most recent articles globally. Use query parameters to filter results. Auth is optional
   * Get recent articles globally
   */
  getArticles({
    tag,
    author,
    favorited,
    limit,
    offset,
  }: GetArticlesRequest): Observable<MultipleArticlesResponse>
  getArticles(
    { tag, author, favorited, limit, offset }: GetArticlesRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<MultipleArticlesResponse>>
  getArticles(
    { tag, author, favorited, limit, offset }: GetArticlesRequest,
    opts?: OperationOpts
  ): Observable<
    MultipleArticlesResponse | RawAjaxResponse<MultipleArticlesResponse>
  > {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    const query: HttpQuery = {}

    if (tag != null) {
      query['tag'] = tag
    }
    if (author != null) {
      query['author'] = author
    }
    if (favorited != null) {
      query['favorited'] = favorited
    }
    if (limit != null) {
      query['limit'] = limit
    }
    if (offset != null) {
      query['offset'] = offset
    }

    return this.request<MultipleArticlesResponse>(
      {
        url: '/articles',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    )
  }

  /**
   * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
   * Get recent articles from users you follow
   */
  getArticlesFeed({
    limit,
    offset,
  }: GetArticlesFeedRequest): Observable<MultipleArticlesResponse>
  getArticlesFeed(
    { limit, offset }: GetArticlesFeedRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<MultipleArticlesResponse>>
  getArticlesFeed(
    { limit, offset }: GetArticlesFeedRequest,
    opts?: OperationOpts
  ): Observable<
    MultipleArticlesResponse | RawAjaxResponse<MultipleArticlesResponse>
  > {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    const query: HttpQuery = {}

    if (limit != null) {
      query['limit'] = limit
    }
    if (offset != null) {
      query['offset'] = offset
    }

    return this.request<MultipleArticlesResponse>(
      {
        url: '/articles/feed',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    )
  }

  /**
   * Update an article. Auth is required
   * Update an article
   */
  updateArticle({
    slug,
    article,
  }: UpdateArticleRequest): Observable<SingleArticleResponse>
  updateArticle(
    { slug, article }: UpdateArticleRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<SingleArticleResponse>>
  updateArticle(
    { slug, article }: UpdateArticleRequest,
    opts?: OperationOpts
  ): Observable<
    SingleArticleResponse | RawAjaxResponse<SingleArticleResponse>
  > {
    throwIfNullOrUndefined(slug, 'slug', 'updateArticle')
    throwIfNullOrUndefined(article, 'article', 'updateArticle')

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey('Authorization'),
      }), // Token authentication
    }

    return this.request<SingleArticleResponse>(
      {
        url: '/articles/{slug}'.replace('{slug}', encodeURI(slug)),
        method: 'PUT',
        headers,
        body: article,
      },
      opts?.responseOpts
    )
  }
}
